version: 2.1
commands:
   # Exercise for infra creation/destuction - Rollback
   destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  say-hello:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World. What a releif !"
# create infra
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy --template-file infra-template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-west-2
  
  # Config and Deployment 
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6f:e9:75:53:67:44:7c:e9:75:2c:a4:81:9d:81:4e:eb"] 
      - run:
          name: Install Ansible
          # Install Ansible
          command: |
            apk add --update ansible
            apk add openssh-client

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=CiCd-Ansible-Ubuntu" \
              --output text)
            echo "$BACKEND_AWS_PUBLIC_IP" >> inventory      

      - run:
          name: Circle-Step- To Run Playbook and Configure server
          command: ansible-playbook main-remote.yml -i inventory 
            # Your command

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}       
 
  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            # return 1 
            # for failing intentionally
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment      

workflows:
  cicd-workflow:
    jobs:
      - say-hello
      - create_infrastructure:
          requires:
            - say-hello
      - configure_infrastructure:
          requires:
            - create_infrastructure
      #- smoke_test
      #     requires:
      #       - create_infrastructure